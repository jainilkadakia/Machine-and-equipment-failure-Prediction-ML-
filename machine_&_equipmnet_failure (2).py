# -*- coding: utf-8 -*-
"""Machine & equipmnet failure.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/187BgOL2CqWGKP-KipMMsSo8j45Ve_58c
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import make_classification
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier




from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline, make_pipeline
from sklearn.preprocessing import (OneHotEncoder, PowerTransformer, StandardScaler)

!pip install scikit-plot
df =pd.read_csv('/content/predictive_maintenance.csv')
df



columns_to_drop = ['UDI', 'Product ID', 'Target', 'Type']
columns_to_drop = [col for col in columns_to_drop if col in df.columns]
df = df.drop(columns_to_drop, axis='columns')
df

from sklearn.preprocessing import LabelEncoder
l = LabelEncoder()

df['Failure Type'] = l.fit_transform(df['Failure Type'])



import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(15,10))
sns.heatmap(df.corr(),annot = True,cmap = "RdYlBu")
plt.draw()
df.hist(figsize=(15, 15))

import seaborn as sns
custom_palette = ["#FF5733", "#33FF57", "#3366FF"]
_ = sns.relplot(x="Air temperature [K]", y="Process temperature [K]", hue="Failure Type",size="Failure Type", sizes=(120, 10),data=df,palette=custom_palette)

custom_palette = ["#FF5733", "#33FF57", "#3366FF"]
_ = sns.relplot(x="Torque [Nm]", y="Rotational speed [rpm]", hue="Failure Type",size="Failure Type", sizes=(100, 5),data=df,  palette=custom_palette)

custom_palette = ["#FF5733", "#33FF57", "#3366FF"]
_ = sns.relplot(x="Tool wear [min]", y="Rotational speed [rpm]", hue="Failure Type",size="Failure Type", sizes=(100, 5),data=df,  palette=custom_palette)

df["Failure Type"].replace({"No Failure": 0,"Heat Dissipation Failure": 1,"Power Failure": 2,"Overstrain Failure": 3,"Tool Wear Failure": 4,"Random Failures": 5},inplace=True)
col_name=df.columns.to_list()
predictive_columns = col_name[0:6]
X = df[predictive_columns]
y = df["Failure Type"]

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=None)

categorical_cols = X.select_dtypes(include="object").columns.to_list()
categorical_pipe = make_pipeline(OneHotEncoder(sparse=False, handle_unknown="ignore"))
to_log = ["Rotational speed [rpm]", "Tool wear [min]"]
to_scale = ["Air temperature [K]", "Process temperature [K]", "Torque [Nm]"]
numeric_pipe = make_pipeline(PowerTransformer(), StandardScaler())
full = ColumnTransformer(
    transformers=[
        ("categorical", categorical_pipe, categorical_cols),
        ("numeric", numeric_pipe, to_log + to_scale)])
rfc = OutputCodeClassifier(RandomForestClassifier(), code_size=6, random_state=40)
pipeline = Pipeline(steps=[("preprocess", full), ("base", rfc)])
model_rfc = pipeline.fit(X_train, y_train)
y_pred_rfc = model_rfc.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay


print(classification_report(y_test, y_pred_rfc))
cm = confusion_matrix(y_test, y_pred_rfc)
cmp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=pipeline.classes_)

fig, ax = plt.subplots(figsize=(12, 12))
cmp.plot(ax=ax)
plt.show()

print(classification_report(y_test, y_pred_rfc))

from sklearn.metrics import accuracy_score

print("Accuracy Score:", accuracy_score(y_test, y_pred_rfc))